import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar

plugins {
    id 'java'
    id 'org.jetbrains.kotlin.jvm' version '1.8.10'
    id "com.github.johnrengelman.shadow" version "7.1.1"
}

group = 'io.github.eone666'
version = 'preview'

repositories {
    mavenCentral()
    maven {
        name = "papermc-repo"
        url = "https://repo.papermc.io/repository/maven-public/"
    }
    maven {
        name = "sonatype"
        url = "https://oss.sonatype.org/content/groups/public/"
    }
    maven {
        name = "jitpack"
        url = "https://jitpack.io"
    }
}

dependencies {
    compileOnly "io.papermc.paper:paper-api:1.19.3-R0.1-SNAPSHOT"
    compileOnly "org.jetbrains.kotlin:kotlin-stdlib:1.8.10" // libraries: entry in plugin.yml should be same

    implementation "com.github.elbekD:kt-telegram-bot:2.2.0"
}

tasks.jar { enabled = false }
artifacts.archives(tasks.shadowJar)

tasks.shadowJar {
    minimize()

    archiveFileName.set("${rootProject.name}.jar")
    String dependencyPackage = "${rootProject.group}.dependencies.${rootProject.name.toLowerCase()}"

    relocate("kotlin", "${dependencyPackage}.kotlin")
    relocate("kotlinx", "${dependencyPackage}.kotlinx")
    relocate("com.elbekd", "${dependencyPackage}.com.elbekd")
    relocate("org", "${dependencyPackage}.org")
    relocate("okio", "${dependencyPackage}.okio")
    relocate("okhttp3", "${dependencyPackage}.okhttp3")
    relocate("javax", "${dependencyPackage}.javax")
    relocate("jakarta", "${dependencyPackage}.jakarta")

    exclude("DebugProbesKt.bin")
    exclude("jetty-dir.css")
    exclude("META-INF/**")
}


def targetJavaVersion = 17
java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
}

tasks.withType(JavaCompile).configureEach {
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        options.release = targetJavaVersion
    }
}

processResources {
    def props = [version: version]
    inputs.properties props
    filteringCharset 'UTF-8'
    filesMatching('plugin.yml') {
        expand props
    }
}

kotlin {
    jvmToolchain(targetJavaVersion)
}